{"version":3,"sources":["Styles/Theme.js","Util/NotificationProvider/index.js","Styles/Styles.js","Main/Questions/Components/Question.js","Store/data/JavaScriptQuestions.js","Main/Questions/Components/JavaScript/JavaScript.js","Store/data/users.js","Main/Auth/index.js","Main/Auth/Components/Login.js","Main/Auth/Components/SignUp.js","Application.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Theme","createMuiTheme","question","primary","contsartText","emitter","EventEmitter","Snackbar","children","useSnackbar","enqueueSnackbar","closeSnackbar","on","message","variant","Notify","emit","NotificationProvider","anchorOrigin","horizontal","vertical","preventDuplicate","autoHideDuration","Styles","theme","fullOuter","padding","boxSizing","width","height","display","overflowY","overflowX","drawerViewBody","marginTop","color","top","withStyles","styles","props","classes","Typography","varient","component","gutterBottom","style","wordBreak","id","que","JavaScriptQuestions","options","a","b","c","d","ans","className","Grid","container","direction","justify","alignItems","spacing","item","md","sm","xs","Paper","map","idx","users","username","password","Login","margin","unit","useState","formData","setFormData","errors","setErrors","handleChange","event","name","target","value","trimStart","prevFormData","newFormData","error","validateError","prevErrors","checkAuthorization","user","find","minHeight","Button","textTransform","Face","TextField","label","type","fullWidth","autoFocus","required","onChange","helperText","Fingerprint","onClick","isEmpty","SignUp","Application","exact","path","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","basename","process","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","module","exports"],"mappings":"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","file":"static/js/main.021ba46b.chunk.js","sourcesContent":["import { createMuiTheme } from '@material-ui/core/styles';\r\n\r\nconst Theme = createMuiTheme({\r\n    question: {\r\n        primary: {\r\n            contsartText: '#ffffff'\r\n        }\r\n    }\r\n});\r\n\r\nexport default Theme;","import React from 'react';\r\nimport { SnackbarProvider, useSnackbar } from 'notistack';\r\nimport Button from '@material-ui/core/Button';\r\nimport EventEmitter from 'event-emitter';\r\n\r\nconst emitter = new EventEmitter();\r\n\r\nconst Snackbar = ({ children }) => {\r\n    const { enqueueSnackbar, closeSnackbar } = useSnackbar();\r\n\r\n    const action = key => (\r\n        <>\r\n            <Button onClick={() => { alert(`I belong to snackbar with key ${key}`); }}>\r\n                'Alert'\r\n            </Button>\r\n            <Button onClick={() => { closeSnackbar(key) }}>\r\n                'Dismiss'\r\n            </Button>\r\n        </>\r\n    );\r\n\r\n    emitter.on('notify', (message, variant) => {\r\n        enqueueSnackbar(message, {\r\n            variant,\r\n            // action\r\n        });\r\n    });\r\n\r\n    return <>{children}</>\r\n}\r\n\r\nexport const Notify = (message, variant) => {\r\n    emitter.emit('notify', message, variant);\r\n}\r\n\r\nconst NotificationProvider = ({ children }) =>\r\n    <SnackbarProvider\r\n        anchorOrigin={{ horizontal: \"right\", vertical: \"bottom\" }}\r\n        preventDuplicate={true}\r\n        autoHideDuration={1500}>\r\n        <Snackbar>{children}</Snackbar>\r\n    </SnackbarProvider>\r\n\r\nexport default NotificationProvider;\r\n\r\n","const Styles = theme => ({\r\n    fullOuter: {\r\n        padding: 15,\r\n        boxSizing: 'border-box',\r\n        width: '100vw',\r\n        height: '100vh',\r\n        display: 'block',\r\n        overflowY: 'scroll',\r\n        overflowX: 'hidden'\r\n    },\r\n    drawerViewBody: {\r\n        padding: 15,\r\n        marginTop: 15\r\n    },\r\n    question: {\r\n        color: 'blue',\r\n        top: 200\r\n    }\r\n});\r\n\r\nexport default Styles;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport styles from '../../../Styles/Styles';\r\n\r\nconst Question = props => {\r\n    const { classes, question } = props;\r\n    return (\r\n        <Typography varient=\"h6\" component=\"p\" gutterBottom style={{ wordBreak: 'break-all' }} >\r\n            Q{question.id}. {question.que}\r\n        </Typography>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(Question);","// https://www.latestinterviewquestions.com/javascript-multiple-choice-questions-answers\r\nconst JavaScriptQuestions = [\r\n    {\r\n        id: 1,\r\n        que: \"JavaScript is ______ language\",\r\n        options: {\r\n            a: \"Scripting\",\r\n            b: \"Programming\",\r\n            c: \"Both a and b\",\r\n            d: \"Application\"\r\n        },\r\n        ans: 'a'\r\n    },\r\n    {\r\n        id: 2,\r\n        que: \"JavaScript is ______ Side scripting language\",\r\n        options: {\r\n            a: \"Server\",\r\n            b: \"Client\",\r\n            c: \"ISP\",\r\n            d: \"Browser\"\r\n        },\r\n        ans: 'd'\r\n    },\r\n    {\r\n        id: 3,\r\n        que: \"The behaviour of the document elements can be defined by\",\r\n        options: {\r\n            a: \"Using document object\",\r\n            b: \"Registering appropriate event handlers\",\r\n            c: \"Using element object\",\r\n            d: \"All of the mentioned\"\r\n        },\r\n        ans: 'b'\r\n    },\r\n    {\r\n        id: 4,\r\n        que: \"The service(s) that enables networking through scripted HTTP requests is\",\r\n        options: {\r\n            a: \"XMLHttpResponse\",\r\n            b: \"XMLRequest\",\r\n            c: \"XMLHttpRequest\",\r\n            d: \"All of the mentioned\"\r\n        },\r\n        ans: 'c'\r\n    },\r\n    {\r\n        id: 5,\r\n        que: \"The HTML5 specification includes\",\r\n        options: {\r\n            a: \"Data storage\",\r\n            b: \"Graphics APIs\",\r\n            c: \"Other APIs for web apps\",\r\n            d: \"All of the mentioned\"\r\n        },\r\n        ans: \"d\"\r\n    },\r\n\r\n];\r\n\r\nexport default JavaScriptQuestions;","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Question from '../Question';\r\nimport JavaScriptQuestions from '../../../../Store/data/JavaScriptQuestions';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport styles from '../../../../Styles/Styles';\r\n\r\nconst JavaScript = props => {\r\n    const { classes } = props;\r\n    return (\r\n        <div className={classes.fullOuter}>\r\n            <Grid container direction='row' justify='center' alignItems='center' spacing={24} >\r\n                <Grid item md={8} sm={12} xs={12}>\r\n                    <Paper className={classes.drawerViewBody}>\r\n                        kmlk\r\n                    </Paper>\r\n                    <Paper className={classes.drawerViewBody}>\r\n                        {JavaScriptQuestions.map((question, idx) => <Question question={{ id: idx + 1, ...question }} />)}\r\n                    </Paper>\r\n                    <Paper className={classes.drawerViewBody}>\r\n                        mop\r\n                    </Paper>\r\n                </Grid>\r\n            </Grid>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withStyles(styles)(JavaScript);","const users = [\r\n    {\r\n        id: 1,\r\n        username: 'admin',\r\n        password: 'admin'\r\n    },\r\n    {\r\n        id: 2,\r\n        username: 'amit',\r\n        password: 'amit'\r\n    }\r\n];\r\n\r\nexport default users; ","import Login from './Components/Login';\r\n\r\nexport default Login;","import React, { useState } from 'react';\r\nimport trimStart from 'lodash/trimStart';\r\nimport isEmpty from 'lodash/isEmpty';\r\nimport { Paper, withStyles, Grid, TextField, Button, FormControlLabel, Checkbox } from '@material-ui/core';\r\nimport { Face, Fingerprint } from '@material-ui/icons';\r\nimport { Notify } from '../../../Util/NotificationProvider';\r\nimport users from '../../../Store/data/users';\r\n\r\nconst styles = theme => ({\r\n    margin: {\r\n        margin: theme.spacing.unit * 2,\r\n    },\r\n    padding: {\r\n        padding: theme.spacing.unit\r\n    }\r\n});\r\n\r\nconst LoginTab = props => {\r\n    const { classes } = props;\r\n    const [formData, setFormData] = useState({});\r\n    const [errors, setErrors] = useState({});\r\n\r\n    const handleChange = event => {\r\n        const { name } = event.target;\r\n        let value = trimStart(event.target.value);\r\n        setFormData(prevFormData => {\r\n            const newFormData = { ...prevFormData, [name]: value };\r\n            const error = validateError(newFormData);\r\n            setErrors(prevErrors => ({ ...prevErrors, [name]: error[name] }));\r\n            return newFormData;\r\n        });\r\n    }\r\n\r\n    const handleLogin = () => {\r\n        setFormData(prevFormData => {\r\n            const errors = validateError(prevFormData);\r\n            if (isEmpty(errors)) {\r\n                const isAuthorized = checkAuthorization(prevFormData);\r\n                if (isAuthorized) Notify('isAuthorized', 'success');\r\n                else Notify('isNotAuthorized', 'error');\r\n            }\r\n            else setErrors(errors);\r\n\r\n            return prevFormData;\r\n        })\r\n    }\r\n\r\n    const validateError = ({ username, password }) => {\r\n        const errors = {};\r\n        if (!username) errors.username = 'Please specify Username';\r\n        if (!password) errors.password = 'Please specify Password';\r\n        return errors;\r\n    }\r\n\r\n    const checkAuthorization = ({ username, password }) => {\r\n        const user = users.find(user => user.username === username);\r\n        return user?.password === password;\r\n    }\r\n\r\n    return (\r\n        <Grid container alignItems=\"center\" justify=\"center\" style={{ minHeight: '80vh' }} >\r\n            <Paper className={classes.padding}>\r\n                <div className={classes.margin}>\r\n                    <Grid container spacing={4} alignItems=\"flex-start\">\r\n                        <Button color=\"secondary\" style={{ textTransform: \"none\" }}>sign up</Button>\r\n                    </Grid>\r\n                    <Grid container spacing={4} alignItems=\"flex-end\">\r\n                        <Grid item>\r\n                            <Face />\r\n                        </Grid>\r\n                        <Grid item md={true} sm={true} xs={true}>\r\n                            <TextField\r\n                                name=\"username\"\r\n                                label=\"Username\"\r\n                                type=\"text\"\r\n                                fullWidth\r\n                                autoFocus\r\n                                required\r\n                                value={formData.username || \"\"}\r\n                                onChange={handleChange}\r\n                                error={!!errors.username}\r\n                                helperText={errors.username}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid container spacing={4} alignItems=\"flex-end\">\r\n                        <Grid item>\r\n                            <Fingerprint />\r\n                        </Grid>\r\n                        <Grid item md={true} sm={true} xs={true}>\r\n                            <TextField\r\n                                name=\"password\"\r\n                                label=\"Password\"\r\n                                type=\"password\"\r\n                                fullWidth\r\n                                required\r\n                                value={formData.password || \"\"}\r\n                                onChange={handleChange}\r\n                                error={!!errors.password}\r\n                                helperText={errors.password}\r\n                            />\r\n                        </Grid>\r\n                    </Grid>\r\n                    {/* <Grid container alignItems=\"center\" justify=\"space-between\">\r\n                            <Grid item>\r\n                                <FormControlLabel control={\r\n                                    <Checkbox\r\n                                        color=\"primary\"\r\n                                    />\r\n                                } label=\"Remember me\" />\r\n                            </Grid>\r\n                            <Grid item>\r\n                                <Button disableFocusRipple disableRipple style={{ textTransform: \"none\" }} variant=\"text\" color=\"primary\">Forgot password ?</Button>\r\n                            </Grid>\r\n                        </Grid> */}\r\n                    <Grid container justify=\"center\" style={{ marginTop: '10px' }}>\r\n                        <Button\r\n                            variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            style={{ textTransform: \"none\" }}\r\n                            onClick={handleLogin}\r\n                        >\r\n                            Login\r\n                        </Button>\r\n                    </Grid>\r\n                </div>\r\n            </Paper>\r\n            {/* <Grid container justify=\"center\">\r\n                    <Button color=\"secondary\" style={{ textTransform: \"none\" }}>sign up</Button>\r\n                </Grid> */}\r\n        </Grid>\r\n    );\r\n}\r\n\r\nexport default withStyles(styles)(LoginTab);","import React from 'react';\r\n\r\nconst SignUp = () => {\r\n    return <>hi</>\r\n}\r\n\r\nexport default SignUp;","import React from 'react';\r\nimport { Route } from 'react-router-dom';\r\nimport Login from './Main/Auth';\r\nimport SignUp from './Main/Auth/Components/SignUp';\r\n\r\nconst Application = () =>\r\n    <>\r\n        <Route exact path=\"/\" component={Login} />\r\n        <Route exact path=\"/s\" component={SignUp} />\r\n    </>\r\n\r\nexport default Application;","import React from 'react';\nimport { Route, Switch, BrowserRouter } from 'react-router-dom';\nimport logo from './logo.svg';\nimport './App.css';\nimport { MuiThemeProvider } from '@material-ui/core/styles';\n// import { SnackbarProvider } from 'notistack';\nimport Theme from './Styles/Theme';\nimport NotificationProvider from './Util/NotificationProvider';\nimport JavaScript from './Main/Questions/Components/JavaScript';\nimport Application from './Application';\n\nfunction App() {\n  return (\n    <MuiThemeProvider theme={Theme}>\n      <NotificationProvider>\n        <Application />\n      </NotificationProvider>\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}